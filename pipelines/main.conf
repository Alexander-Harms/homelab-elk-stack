input {
  beats { 
    port => 5044 
    type => "beats"
  }
  syslog { 
    port => 514 
    use_labels => true 
    tags => ["syslog", "network"] 
    type => "syslog"
  }
  gelf { 
    port => 12201 
    tags => ["gelf", "docker"] 
    type => "gelf"
  }
  tcp { 
    port => 5000 
    codec => json_lines 
    tags => ["tcp", "json"] 
    type => "tcp_json"
  }
}

filter {
  mutate {
    add_field => { 
      "processed_at" => "%{@timestamp}"
      "homelab_version" => "1.0"
    }
  }

  if "syslog" in [tags] or [type] == "syslog" {
    mutate {
      add_field => { "log_type" => "syslog" }
    }
    
    # Handle CEF (Common Event Format) logs from UniFi first
    if [message] =~ /CEF:/ {
      grok {
        match => { 
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host} %{GREEDYDATA:cef_message}"
        }
        tag_on_failure => ["_grokparsefailure_cef"]
      }
      
      mutate {
        add_field => {
          "[service][name]" => "unifi"
          "[service][type]" => "network"
          "device_type" => "unifi"
          "source_category" => "network_security"
          "[host][name]" => "%{host}"
        }
        add_tag => ["unifi", "cef"]
      }
    }
    # Handle standard syslog messages
    else {
      grok {
        match => { 
          "message" => [
            "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{DATA:program}(?:\\[%{POSINT:pid}\\])?: %{GREEDYDATA:log_message}",
            "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{GREEDYDATA:log_message}",
            "%{GREEDYDATA:log_message}"
          ]
        }
        tag_on_failure => ["_grokparsefailure_syslog"]
      }
      
      # Always ensure we have a service name
      if [program] and [program] != "" {
        mutate {
          add_field => { "[service][name]" => "%{program}" }
        }
      } else if [host] {
        mutate {
          add_field => { "[service][name]" => "host-%{host}" }
        }
      } else {
        mutate {
          add_field => { "[service][name]" => "syslog-unknown" }
        }
      }
      
      # Device type detection
      if [program] =~ /(?i)pve|proxmox/ or [host] =~ /(?i)pve|proxmox/ or [host] == "192.168.1.125" {
        mutate { 
          add_field => { 
            "device_type" => "proxmox" 
            "[service][type]" => "infrastructure"
          }
          replace => { "[service][name]" => "proxmox" }
          add_tag => ["proxmox"] 
        }
      } else if [program] =~ /(?i)ssh|sshd/ {
        mutate { 
          add_field => { 
            "device_type" => "system" 
            "[service][type]" => "authentication"
          }
          replace => { "[service][name]" => "ssh" }
          add_tag => ["ssh", "auth"] 
        }
      } else if [program] =~ /(?i)kernel/ {
        mutate { 
          add_field => { 
            "device_type" => "system" 
            "[service][type]" => "system"
          }
          replace => { "[service][name]" => "kernel" }
          add_tag => ["system", "kernel"] 
        }
      } else if [program] =~ /(?i)systemd/ {
        mutate { 
          add_field => { 
            "device_type" => "system" 
            "[service][type]" => "system"
          }
          replace => { "[service][name]" => "systemd" }
          add_tag => ["system", "systemd"] 
        }
      } else {
        mutate { 
          add_field => { 
            "device_type" => "network" 
            "[service][type]" => "system"
          }
        }
      }
      
      # Set host name properly for non-CEF messages
      if [host] and [host] != "" {
        mutate {
          add_field => { "[host][name]" => "%{host}" }
        }
      }
    }
    
    # Parse timestamp
    if [timestamp] and "_grokparsefailure" not in [tags] {
      date { 
        match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        timezone => "America/Chicago"
        target => "@timestamp"
      }
    }
    
    # Add source category for home network
    if [host] =~ /^192\\.168\\./ { 
      mutate { add_field => { "source_category" => "home_network" } } 
    }
  }
  
  # Final validation - ensure every log has a service name
  if ![service][name] or [service][name] == "" {
    if [log_type] {
      mutate {
        add_field => { "[service][name]" => "unclassified-%{log_type}" }
      }
    } else {
      mutate {
        add_field => { "[service][name]" => "unclassified-unknown" }
      }
    }
  }
  
  # Clean up
  mutate {
    remove_field => [ "agent", "ecs", "input", "@version", "cef_message" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "homelab-logs-%{[device_type]}-%{+YYYY.MM.dd}"
  }
}
